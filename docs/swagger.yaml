basePath: /api/v1
definitions:
  models.Book:
    properties:
      author:
        type: string
      cart_books:
        items:
          $ref: '#/definitions/models.CartBook'
        type: array
      carts:
        items:
          $ref: '#/definitions/models.Cart'
        type: array
      cover:
        type: string
      created_at:
        type: string
      genre:
        type: string
      id:
        type: integer
      price:
        type: integer
      quantity:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
      year:
        type: integer
    type: object
  models.Cart:
    properties:
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      created_at:
        type: string
      id:
        type: integer
      total_price:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.CartBook:
    properties:
      book_id:
        type: integer
      cart_id:
        type: integer
      quantity:
        type: integer
    type: object
  models.CreateBook:
    properties:
      author:
        type: string
      cover:
        type: string
      genre:
        type: string
      price:
        type: integer
      quantity:
        type: integer
      title:
        type: string
      year:
        type: integer
    required:
    - author
    - cover
    - genre
    - price
    - quantity
    - title
    - year
    type: object
  models.LoginAdmin:
    properties:
      password:
        example: admin123!
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  models.LoginUser:
    properties:
      password:
        example: Test123!
        type: string
      username:
        example: test
        type: string
    required:
    - password
    - username
    type: object
  models.RegisterAdmin:
    properties:
      email:
        example: admin@test.com
        type: string
      password:
        example: admin123!
        type: string
      username:
        example: admin
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.RegisterUser:
    properties:
      email:
        example: test@test.com
        type: string
      password:
        example: Test123!
        type: string
      username:
        example: test
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Transaction:
    properties:
      amount:
        type: integer
      created_at:
        type: string
      expiry_time:
        type: string
      id:
        type: integer
      invoice_date:
        type: string
      invoice_number:
        type: string
      items:
        type: string
      qris_string:
        type: string
      qris_url:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.UpdateBook:
    properties:
      author:
        type: string
      cover:
        type: string
      genre:
        type: string
      price:
        type: integer
      quantity:
        type: integer
      title:
        type: string
      year:
        type: integer
    type: object
  models.User:
    properties:
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:9000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for bookstore.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Bookstore API GO
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ping example
      tags:
      - example
  /admin/books:
    get:
      consumes:
      - application/json
      description: Get all books
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all books
          schema:
            $ref: '#/definitions/models.Book'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all books
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a book
      parameters:
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.CreateBook'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created book
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a book
      tags:
      - admin
  /admin/books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted book
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update a book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBook'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated book
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a book
      tags:
      - admin
  /admin/login:
    post:
      consumes:
      - application/json
      description: Authenticates an admin using username and password, returns a JWT
        token if successful
      parameters:
      - description: Admin login object
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.LoginAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate an admin
      tags:
      - admin
  /admin/register:
    post:
      consumes:
      - application/json
      description: Registers a new admin with the given username and password
      parameters:
      - description: Admin registration object
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.RegisterAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register a new admin
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all users
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - admin
  /admin/users/{username}:
    put:
      consumes:
      - application/json
      description: Update user by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update user by username
      tags:
      - admin
  /user/books:
    get:
      consumes:
      - application/json
      description: Get all books
      parameters:
      - description: Genre
        in: query
        name: genre
        type: string
      - description: Author
        in: query
        name: author
        type: string
      - description: Year
        in: query
        name: year
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all books
          schema:
            $ref: '#/definitions/models.Book'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all books
      tags:
      - user
  /user/cart:
    get:
      consumes:
      - application/json
      description: Get the cart of the currently logged in user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched cart
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Cart not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get the cart
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Add a book to the cart of the currently logged in user
      parameters:
      - description: Book ID
        in: body
        name: id
        schema:
          type: integer
      - description: Quantity
        in: body
        name: quantity
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added book to cart
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Book not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add a book to the cart
      tags:
      - user
  /user/cart/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a book from the cart of the currently logged in user
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully removed book from cart
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Book not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Remove a book from the cart
      tags:
      - user
  /user/cart/checkout:
    post:
      consumes:
      - application/json
      description: Checkout the cart of the currently logged in user, and pay for
        the books with Midtrans (qris as payment method)
      produces:
      - application/json
      responses:
        "200":
          description: Successfully checked out
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Cart not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Checkout
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using username and password, returns a JWT
        token if successful
      parameters:
      - description: User login object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Authenticate a user
      tags:
      - user
  /user/payment:
    post:
      consumes:
      - application/json
      description: Handle the payment status of a transaction
      parameters:
      - description: Order ID
        in: body
        name: order_id
        required: true
        schema:
          type: string
      - description: Transaction Status
        in: body
        name: transaction_status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully handled payment status
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Transaction not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Payment Handler
      tags:
      - user
  /user/profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently logged in user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update the profile of the currently logged in user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user profile
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the given username and password
      parameters:
      - description: User registration object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register a new user
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
